{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAdress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe_NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fundingAddress",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x61e00118dfc6a6fe8cacb885d16cf075a341c9ccb85ab6b7bb79c825a854912c",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "775896",
    "logsBloom": "0x
    "blockHash": "0x121aa91db8d018081d8cc2856c097643b8cd710e2313493bd3a2673ecd64ecab",
    "transactionHash": "0x61e00118dfc6a6fe8cacb885d16cf075a341c9ccb85ab6b7bb79c825a854912c",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "775896",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "3642a9d9882dc0ca18c079b6f172f482",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAdress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe_NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundingAddress\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Maheswar Reddy\",\"kind\":\"dev\",\"methods\":{\"fund()\":{\"details\":\"This implements pricefeed as library\"}},\"title\":\"A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"This function funds this project\"}},\"notice\":\"This is a sample funding project\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n//pragma\\npragma solidity ^0.8.8;\\n//imports\\nimport \\\"./PriceConverter.sol\\\";\\n//errors\\nerror FundMe_NotOwner();\\n\\n/**\\n * @title A contract for crowd funding\\n * @author Maheswar Reddy\\n * @notice This is a sample funding project\\n */\\ncontract FundMe {\\n    //Type Declerations\\n    using PriceConverter for uint256;\\n\\n    //State Variables\\n    address[] private s_funders;\\n    AggregatorV3Interface private s_priceFeed;\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    // uint256 public constant minimumUsd = 50 * 1e18;\\n    address private immutable i_owner;\\n\\n    //Modifiers\\n\\n    modifier onlyOwner() {\\n        //require(msg.sender == owner,\\\"sender is not owner\\\");\\n        if (msg.sender != i_owner) {\\n            revert FundMe_NotOwner();\\n        }\\n        _;\\n    }\\n\\n    //constructor\\n    //receive function\\n    //fallback function\\n    //external\\n    //public\\n    //internal\\n    //private\\n\\n    constructor(address priceFeedAdress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(priceFeedAdress);\\n    }\\n\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    /** @notice This function funds this project\\n     *  @dev This implements pricefeed as library\\n     */\\n\\n    function fund() public payable {\\n        //want to set minimum in usd\\n        // require(\\n        //     msg.value.getConversionRate(s_priceFeed) > minimumUsd,\\n        //     \\\"Didn't send enough amount\\\"\\n        // );\\n        s_funders.push(msg.sender);\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        //reset array\\n        s_funders = new address[](0);\\n        //withdraw funds\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuccess, \\\"call failed\\\");\\n    }\\n\\n    function cheaperWithdraw() public onlyOwner {\\n        address[] memory funders = s_funders;\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        //withdraw funds\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuccess, \\\"call failed\\\");\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getFunders(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getAddressToAmountFunded(\\n        address fundingAddress\\n    ) public view returns (uint256) {\\n        return s_addressToAmountFunded[fundingAddress];\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n}\\n\",\"keccak256\":\"0x3b3ecf6d1362a6c11405df27b8363bd9c528c8944ef5927e4cde3551851b25a2\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n    function getPrice(\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        (\\n            ,\\n            /*uint80 roundId*/ int256 price /*uint256 startedAt*/ /*uint256 updatedAt*/ /* uint80 answeredInRound*/,\\n            ,\\n            ,\\n\\n        ) = priceFeed.latestRoundData();\\n        //ETH IN USD\\n        return uint256(price * 1e10);\\n    }\\n\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0x93495fde7ea65baa16edbea4b6847a4c7382a438bfc9bb6ee4a6ff4769b7a53e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610e0f380380610e0f83398181016040528101906100329190610113565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610140565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100e0826100b5565b9050919050565b6100f0816100d5565b81146100fb57600080fd5b50565b60008151905061010d816100e7565b92915050565b600060208284031215610129576101286100b0565b5b6000610137848285016100fe565b91505092915050565b60805160601c610ca361016c600039600081816102e20152818161052401526105740152610ca36000f3fe6080604052600436106100745760003560e01c8063893d20e81161004e578063893d20e81461011e5780639e87a5cd14610149578063b60d428814610174578063be2693f01461017e57610083565b80630343fb251461008d5780633a7b6c74146100ca5780633ccfd60b1461010757610083565b3661008357610081610195565b005b61008b610195565b005b34801561009957600080fd5b506100b460048036038101906100af9190610920565b610250565b6040516100c19190610966565b60405180910390f35b3480156100d657600080fd5b506100f160048036038101906100ec91906109ad565b610299565b6040516100fe91906109e9565b60405180910390f35b34801561011357600080fd5b5061011c6102e0565b005b34801561012a57600080fd5b50610133610520565b60405161014091906109e9565b60405180910390f35b34801561015557600080fd5b5061015e610548565b60405161016b9190610a63565b60405180910390f35b61017c610195565b005b34801561018a57600080fd5b50610193610572565b005b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102479190610aad565b92505081905550565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008082815481106102ae576102ad610b03565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610365576040517f10e0797900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60008054905081101561041057600080828154811061038a57610389610b03565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061040890610b32565b915050610368565b50600067ffffffffffffffff81111561042c5761042b610b7b565b5b60405190808252806020026020018201604052801561045a5781602001602082028036833780820191505090505b5060009080519060200190610470929190610816565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161049790610bdb565b60006040518083038185875af1925050503d80600081146104d4576040519150601f19603f3d011682016040523d82523d6000602084013e6104d9565b606091505b505090508061051d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051490610c4d565b60405180910390fd5b50565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105f7576040517f10e0797900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561067a57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610630575b5050505050905060005b81518110156107055760008282815181106106a2576106a1610b03565b5b602002602001015190506000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806106fd90610b32565b915050610684565b50600067ffffffffffffffff81111561072157610720610b7b565b5b60405190808252806020026020018201604052801561074f5781602001602082028036833780820191505090505b5060009080519060200190610765929190610816565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161078c90610bdb565b60006040518083038185875af1925050503d80600081146107c9576040519150601f19603f3d011682016040523d82523d6000602084013e6107ce565b606091505b5050905080610812576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080990610c4d565b60405180910390fd5b5050565b82805482825590600052602060002090810192821561088f579160200282015b8281111561088e5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610836565b5b50905061089c91906108a0565b5090565b5b808211156108b95760008160009055506001016108a1565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006108ed826108c2565b9050919050565b6108fd816108e2565b811461090857600080fd5b50565b60008135905061091a816108f4565b92915050565b600060208284031215610936576109356108bd565b5b60006109448482850161090b565b91505092915050565b6000819050919050565b6109608161094d565b82525050565b600060208201905061097b6000830184610957565b92915050565b61098a8161094d565b811461099557600080fd5b50565b6000813590506109a781610981565b92915050565b6000602082840312156109c3576109c26108bd565b5b60006109d184828501610998565b91505092915050565b6109e3816108e2565b82525050565b60006020820190506109fe60008301846109da565b92915050565b6000819050919050565b6000610a29610a24610a1f846108c2565b610a04565b6108c2565b9050919050565b6000610a3b82610a0e565b9050919050565b6000610a4d82610a30565b9050919050565b610a5d81610a42565b82525050565b6000602082019050610a786000830184610a54565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610ab88261094d565b9150610ac38361094d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610af857610af7610a7e565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610b3d8261094d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610b7057610b6f610a7e565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610bc5600083610baa565b9150610bd082610bb5565b600082019050919050565b6000610be682610bb8565b9150819050919050565b600082825260208201905092915050565b7f63616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610c37600b83610bf0565b9150610c4282610c01565b602082019050919050565b60006020820190508181036000830152610c6681610c2a565b905091905056fea264697066735822122045397ca78ff9f380165e167658718667bbfcb735180a3996d316768634c0565064736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106100745760003560e01c8063893d20e81161004e578063893d20e81461011e5780639e87a5cd14610149578063b60d428814610174578063be2693f01461017e57610083565b80630343fb251461008d5780633a7b6c74146100ca5780633ccfd60b1461010757610083565b3661008357610081610195565b005b61008b610195565b005b34801561009957600080fd5b506100b460048036038101906100af9190610920565b610250565b6040516100c19190610966565b60405180910390f35b3480156100d657600080fd5b506100f160048036038101906100ec91906109ad565b610299565b6040516100fe91906109e9565b60405180910390f35b34801561011357600080fd5b5061011c6102e0565b005b34801561012a57600080fd5b50610133610520565b60405161014091906109e9565b60405180910390f35b34801561015557600080fd5b5061015e610548565b60405161016b9190610a63565b60405180910390f35b61017c610195565b005b34801561018a57600080fd5b50610193610572565b005b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102479190610aad565b92505081905550565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008082815481106102ae576102ad610b03565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610365576040517f10e0797900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60008054905081101561041057600080828154811061038a57610389610b03565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061040890610b32565b915050610368565b50600067ffffffffffffffff81111561042c5761042b610b7b565b5b60405190808252806020026020018201604052801561045a5781602001602082028036833780820191505090505b5060009080519060200190610470929190610816565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161049790610bdb565b60006040518083038185875af1925050503d80600081146104d4576040519150601f19603f3d011682016040523d82523d6000602084013e6104d9565b606091505b505090508061051d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051490610c4d565b60405180910390fd5b50565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105f7576040517f10e0797900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561067a57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610630575b5050505050905060005b81518110156107055760008282815181106106a2576106a1610b03565b5b602002602001015190506000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806106fd90610b32565b915050610684565b50600067ffffffffffffffff81111561072157610720610b7b565b5b60405190808252806020026020018201604052801561074f5781602001602082028036833780820191505090505b5060009080519060200190610765929190610816565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161078c90610bdb565b60006040518083038185875af1925050503d80600081146107c9576040519150601f19603f3d011682016040523d82523d6000602084013e6107ce565b606091505b5050905080610812576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080990610c4d565b60405180910390fd5b5050565b82805482825590600052602060002090810192821561088f579160200282015b8281111561088e5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610836565b5b50905061089c91906108a0565b5090565b5b808211156108b95760008160009055506001016108a1565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006108ed826108c2565b9050919050565b6108fd816108e2565b811461090857600080fd5b50565b60008135905061091a816108f4565b92915050565b600060208284031215610936576109356108bd565b5b60006109448482850161090b565b91505092915050565b6000819050919050565b6109608161094d565b82525050565b600060208201905061097b6000830184610957565b92915050565b61098a8161094d565b811461099557600080fd5b50565b6000813590506109a781610981565b92915050565b6000602082840312156109c3576109c26108bd565b5b60006109d184828501610998565b91505092915050565b6109e3816108e2565b82525050565b60006020820190506109fe60008301846109da565b92915050565b6000819050919050565b6000610a29610a24610a1f846108c2565b610a04565b6108c2565b9050919050565b6000610a3b82610a0e565b9050919050565b6000610a4d82610a30565b9050919050565b610a5d81610a42565b82525050565b6000602082019050610a786000830184610a54565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610ab88261094d565b9150610ac38361094d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610af857610af7610a7e565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610b3d8261094d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610b7057610b6f610a7e565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610bc5600083610baa565b9150610bd082610bb5565b600082019050919050565b6000610be682610bb8565b9150819050919050565b600082825260208201905092915050565b7f63616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610c37600b83610bf0565b9150610c4282610c01565b602082019050919050565b60006020820190508181036000830152610c6681610c2a565b905091905056fea264697066735822122045397ca78ff9f380165e167658718667bbfcb735180a3996d316768634c0565064736f6c63430008080033",
  "devdoc": {
    "author": "Maheswar Reddy",
    "kind": "dev",
    "methods": {
      "fund()": {
        "details": "This implements pricefeed as library"
      }
    },
    "title": "A contract for crowd funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "This function funds this project"
      }
    },
    "notice": "This is a sample funding project",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 57,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 60,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 64,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}